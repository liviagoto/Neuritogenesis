import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

def create_sholl_plot(excel_file):
    """
    Create Sholl analysis plot from Excel file with two sheets:
    Planilha1: Contains radius and intersection data
    Planilha2: Contains well codes and treatment conditions
    """
    # Read both sheets
    data_sheet = pd.read_excel(excel_file, sheet_name="Planilha1")
    treatment_sheet = pd.read_excel(excel_file, sheet_name="Planilha2")
    
    # Remove unnamed columns and melt the dataframe
    data_cols = [col for col in data_sheet.columns if not col.startswith("Unnamed")]
    long_data = data_sheet[data_cols].melt(
        id_vars=["Radius"], 
        var_name="Well", 
        value_name="Value"
    )
    
    # Merge with treatment information
    long_data = pd.merge(
        long_data, 
        treatment_sheet, 
        left_on="Well", 
        right_on="Image"
    )
    
    # Calculate mean and standard error by radius and condition
    summary_data = long_data.groupby(["Radius", "Condition"]).agg({
        "Value": ["mean", "std", "count"]
    }).reset_index()
    
    # Flatten column names
    summary_data.columns = ["Radius", "Condition", "mean_value", "std", "count"]
    
    # Calculate standard error
    summary_data["se"] = summary_data["std"] / np.sqrt(summary_data["count"])
    
    # Filter for radius 1-30
    summary_data = summary_data[
        (summary_data["Radius"] >= 1) & 
        (summary_data["Radius"] <= 30)
    ]
    
    # Set figure style and size
    plt.style.use('seaborn')
    plt.figure(figsize=(12, 8))
    
    # Create color palette for different conditions
    colors = plt.cm.Set2(np.linspace(0, 1, len(summary_data["Condition"].unique())))
    
    # Plot for each condition with improved styling
    for condition, color in zip(summary_data["Condition"].unique(), colors):
        condition_data = summary_data[summary_data["Condition"] == condition]
        
        plt.plot(
            condition_data["Radius"], 
            condition_data["mean_value"], 
            label=condition,
            color=color,
            linewidth=2,
            marker='o',
            markersize=4
        )
        
        plt.fill_between(
            condition_data["Radius"],
            condition_data["mean_value"] - condition_data["se"],
            condition_data["mean_value"] + condition_data["se"],
            color=color,
            alpha=0.2
        )
    
    # Customize plot with improved styling
    plt.xlabel("Radius (Î¼m)", fontsize=12, fontweight='bold')
    plt.ylabel("Number of Intersections", fontsize=12, fontweight='bold')
    plt.title("Sholl Analysis", fontsize=14, fontweight='bold', pad=20)
    
    # Customize legend
    plt.legend(
        title="Treatment Conditions",
        title_fontsize=10,
        fontsize=9,
        bbox_to_anchor=(1.05, 1),
        loc="upper left",
        borderaxespad=0.
    )
    
    # Customize grid and ticks
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.xticks(np.arange(0, 35, 5), fontsize=10)
    plt.yticks(fontsize=10)
    plt.xlim(1, 30)
    
    # Add a light box around the plot
    plt.box(True)
    
    # Adjust layout to prevent legend cutoff
    plt.tight_layout()
    
    return plt.gcf()

# Generate and display the plot
fig = create_sholl_plot("Sholl_LSD curve.xlsx")
plt.show()

# Save the plot with high resolution
fig.savefig('sholl_analysis.png', dpi=300, bbox_inches='tight')
files.download('sholl_analysis.png')  # This will download the saved figure
